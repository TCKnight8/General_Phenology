##class object meant to pass objects from a list to calculate and report degree day accumulation.

class Degree_day:
    def __init__(self, common_name, scientific_name, base_temp, upper_temp, temp_list):
        self.common_name        = common_name
        self.scientific_name    = scientific_name
        self.base_temp          = base_temp
        self.upper_temp         = upper_temp
        self.temp_list          = temp_list
        
    def degree_days(self):
        dd = 0
        x  = 0
        z  = 0
        for list in self.temp_list:
            T     = (list[0] + list[1])/2
            alpha = (list[1] - list[0])/2 
            if list[0]   > self.upper_temp and list[1] > self.upper_temp:
                y = 0.5*(self.upper_temp - self.base_temp)
            elif list[0] < self.base_temp and  list[1] < self.base_temp:
                y = 0
            elif list[0] > self.base_temp and  list[1] < self.upper_temp:
                y = 0.5*(T - self.base_temp)
            elif list[0] < self.base_temp and  list[1] < self.upper_temp:
                theta = np.arcsin((self.base_temp - T)/alpha)
                y = (1/(2.3.141))*(T - self.base_temp)*(theta + 3.141/2) 
                    + T*np.cos(theta))
            elif list[0] > self.base_temp and  list[1] > self.upper_temp:
                theta = np.arcsin((self.upper_temp - T)/alpha)
                y = (1/2*3.141))*((T - self.base_temp)*(theta + 3.141/2)
                    + (self.upper_temp - self.base_temp)*(3.141/2 - theta)
                    - alpha*np.cos(theta))
            elif list[0] < self.base_temp and  list[1] > self.upper_temp:
                theta1 = np.arcsin((self.base_temp - T)/alpha)
                theta2 = np.arcsin((self.upper_temp - T)/alpha)
                y = (1/(2*3.141))*((T - self.base_temp)*(theta2 - theta1)
                    + alpha*(np.cos(theta1)
                    - np.cos(theta2))
                    + (self.upper_temp - self.base_temp)*(3.141/2 - theta2))
            if y < 0:
                y = 0
            else:
                pass
            x = y

            T2     = (list[2] + list[1])/2
            alpha2 = (list[1] - list[2])/2
            if list[2]   > self.upper_temp and list[1] > self.upper_temp:
                q = 0.5*(self.upper_temp - self.base_temp)
            elif list[2] < self.base_temp and  list[1] < self.base_temp:
                q = 0
            elif list[2] > self.base_temp and  list[1] < self.upper_temp:
                q = 0.5*(T2 - self.base_temp)
            elif list[2] < self.base_temp and  list[1] < self.upper_temp:
                theta = np.arcsin((self.base_temp - T2)/alpha2)
                q = (1/(2.3.141))*(T2 - self.base_temp)*(theta + 3.141/2) 
                    + T2*np.cos(theta))
            elif list[2] > self.base_temp and  list[1] > self.upper_temp:
                theta = np.arcsin((self.upper_temp - T2)/alpha)
                q = (1/2*3.141))*((T2 - self.base_temp)*(theta + 3.141/2)
                    + (self.upper_temp - self.base_temp)*(3.141/2 - theta)
                    - alpha2*np.cos(theta))
            elif list[2] < self.base_temp and  list[1] > self.upper_temp:
                theta1 = np.arcsin((self.base_temp - T2)/alpha2)
                theta2 = np.arcsin((self.upper_temp - T2)/alpha2)
                q = (1/(2*3.141))*((T2 - self.base_temp)*(theta2 - theta1)
                    + alpha2*(np.cos(theta1)
                    - np.cos(theta2))
                    + (self.upper_temp - self.base_temp)*(3.141/2 - theta2))
            if q < 0:
                q = 0
            else:
                pass
            z = q
            dd = (x + z)  
        
#class objected meant to create a list object of temperature data from a dataframe.

class temperature_input:
    def __init__(self, temp_df):
        self.temp_df = temp_df
        
    def make_temp_list(self):
        temp_listoflist = self.temp_df["Temp"].tolist()
        return temp_listoflist
        
#class object designed to find specific rows in a data frame based on a string argument. These rows are then to be turned into list objects 
#that can be searched for specific values. 

class find_elements:
    def __init__(self, df, string):
        self.df     = df
        self.string = string

    def find_row(self):
        row      = df.loc[df["Scientific name"] == self.string]
        row_list = row.values.tolist()
        return row_list
    
    def common_name(self, row_list):
        common_name = row_list[0][1]
        return common_name
    
    def scientific_name(self, row_list):
        scientific_name = row_list[0][0]
        return scientific_name
    
    def base_temp(self, row_list):
        base_temp = row_list[0][2]
        return base_temp
    
    def upper_temp(self, row_list):
        upper_temp = row_list[0][3]
        return upper_temp

#Example
import pandas as pd
import numpy as ny
import matplotlib as plt

df = pd.read_csv('Simple_insect_development.csv', delimiter = ',')
temp_frame = pd.read_csv('random_temp.csv')

a = find_elements(df, "Circulifer tenellus")
tdf = temperature_input(temp_frame)
b = Degree_day(a.common_name(a.find_row()), a.scientific_name(a.find_row()), a.base_temp(a.find_row()), a.upper_temp(a.find_row()), tdf.make_temp_list())
